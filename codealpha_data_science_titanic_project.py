# -*- coding: utf-8 -*-
"""CodeAlpha Data Science Titanic Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FQcI1csqHkF1FTYCfMjVQkvg0IRShETn
"""

import pandas as pd
#Load the dataset
file_path = 'titanic_comp.csv'
df = pd.read_csv(file_path)
df

df.info()

import matplotlib.pyplot as plt

ax = df['Age'].hist(bins=16, range=(0,80), alpha = .5)
ax.set_xlabel('Age')
ax.set_ylabel('Frequency')
plt.show()

"""Usually Younger because life expentancy"""

import seaborn as sns

plt.figure(figsize=(7.5,4))
sns.kdeplot(df["Fare"][df.Survived==1], color="darkturquoise", fill=True)
sns.kdeplot(df["Fare"][df.Survived==0], color="lightcoral", fill=True)
plt.legend(['Survived', 'Died'])
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.title('Fare Distribution by Survival')
plt.xlim(0,200)
plt.show()

"""people with cheaper tickets died more"""

plt.figure(figsize=(7.5,4))
sns.kdeplot(df["Age"][df.Survived==1], color="darkturquoise", fill=True)
sns.kdeplot(df["Age"][df.Survived==0], color="lightcoral", fill=True)
plt.legend(['Survived', 'Died'])
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution by Survival')
plt.xlim(0,80)
plt.show()

"""little kids were tried to save first"""

sns.barplot(x="Gender", y="Survived", data=df, hue="Pclass", palette='pastel')
plt.xlabel('Gender')
plt.ylabel('Survival Rate')
plt.title("Survival by Gender and Passenger Class")
plt.show()

"""Women survied men were destined to die"""

df = pd.get_dummies(df, columns=['Gender'])
df

for col in df.columns:
    if df[col].dtype == bool:
        df[col] = df[col].astype(int)
df

concatenated_df= df[['Gender_male', 'Gender_female', 'Age', 'Fare', 'Pclass', 'Survived','SibSp','Parch']]
concatenated_df.describe()

correlation = concatenated_df.corr()
correlation



fig, ax = plt.subplots(figsize=(10, 7))
sns.heatmap(concatenated_df.corr(), annot=True, fmt='.2f', cmap='coolwarm', ax=ax)
plt.title('Correlation Heatmap')
plt.show()

concatenated_df = concatenated_df[['Survived', 'Fare', 'Gender_male','Gender_female']]

concatenated_df = concatenated_df.dropna()
concatenated_df

from sklearn.model_selection import train_test_split


x = concatenated_df.drop('Survived', axis=1)
y = concatenated_df['Survived']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
x_train.shape, x_test.shape, y_train.shape, y_test.shape

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(random_state=0)
model.fit(x_train, y_train)

log_acc = round(model.score(x_test, y_test) * 100, 2)
log_acc

import numpy as np
from sklearn.metrics import confusion_matrix

y_pred = model.predict(x_test)
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(7, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

female = [[110,0,1]]
model.predict(female)[0]

probability = model.predict_proba(female)[0][1]
probability

male = [[110,1,0]]
model.predict(male)[0]

probability = model.predict_proba(male)[0][1]
probability

from sklearn.tree import DecisionTreeClassifier

tree = DecisionTreeClassifier(random_state=0)
tree.fit(x_train, y_train)
y_pred = tree.predict(x_test)
tree_acc = round(tree.score(x_test, y_test) * 100, 2)
tree_acc

from sklearn.ensemble import RandomForestClassifier

forest = RandomForestClassifier(random_state=0)
forest.fit(x_train, y_train)
y_pred = forest.predict(x_test)
forest_acc = round(forest.score(x_test, y_test) * 100, 2)
forest_acc

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()
knn.fit(x_train, y_train)
y_pred = knn.predict(x_test)
knn_acc = round(knn.score(x_test, y_test) * 100, 2)
knn_acc